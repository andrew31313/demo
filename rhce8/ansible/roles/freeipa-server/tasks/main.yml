---
# The idm client module must be disabled before we can activate the server
- name: Ensure the idm client module is removed
  dnf:
    name: '@idm:client'
    state: absent
  become: yes
- name: Ensure the idm DL1 module is installed
  dnf:
    name: '@idm:DL1'
    state: present
  become: yes
- name: Ensure packages for the IPA server are installed
  package:
    name: "{{ item }}"
    state: present
  become: yes
  when: ipa_server.packages is defined
  loop: "{{ ipa_server.packages }}"
- name: Check the ipa-server-install install status
  command: ipactl status
  register: ipastatus
  changed_when: false
  failed_when: false
  become: yes
- name: Ensure IPA server is configured (takes several minutes if it isn't)
  command: "ipa-server-install --setup-dns --allow-zone-overlap -U -p {{ passwords.directory_manager }} -a {{ passwords.ipa_admin }} -n {{ dns.domain }} -r {{ krb5.realm }} --ip-address {{ site.ipa_server.ip }} --hostname {{ site.ipa_server.fqdn }} --reverse-zone {{ dns.reverse_zone }} --forwarder {{ dns.forwarder }}"
  become: yes
  when: ipastatus.rc == 4
  notify: reboot
- name: Ensure cacert.p12 file is available via FTP
  copy:
    src: /root/cacert.p12
    dest: /var/ftp/pub/cacert.p12
    remote_src: yes
    owner: pkiuser
    group: pkiuser
    mode: 0644
    setype: public_content_t
  become: yes
  when: ipastatus.rc == 4
- name: "Ensure host/{{ item }} principal exists in IPA"
  shell: "echo password | kinit admin; ipa host-find {{ item }} || ipa host-add {{ item }}"
  when: krb5.principals.host is defined
  loop: "{{ krb5.principals.nfs }}"
- name: "Ensure nfs/{{ item }} principal exists in IPA"
  shell: "echo password | kinit admin; ipa service-find nfs/{{ item }} || ipa service-add nfs/{{ item }}"
  when: krb5.principals.nfs is defined
  loop: "{{ krb5.principals.nfs }}"
- name: Get existing A records from IPA DNS
  shell: "echo {{ passwords.krb5_admin }} | kinit admin; ipa dnsrecord-find example.com | sed -n 's/  Record name: //p'"
  changed_when: false
  failed_when: false
  register: ipa_dns_a_records
- name: Ensure A records for hosts exist
  shell: "echo {{ passwords.krb5_admin }} | kinit admin; ipa dnsrecord-add {{ item.azone }} {{ item.ptr }} --a-ip-address 192.168.4.{{ item.a }}"
  when: item.ptr not in ipa_dns_a_records.stdout_lines
  loop: "{{ dns.rr }}"
- name: Get existing PTR records from IPA DNS
  shell: "echo {{ passwords.krb5_admin }} | kinit admin; ipa dnsrecord-find 4.168.192.in-addr.arpa | sed -n 's/  Record name: //p'"
  changed_when: false
  failed_when: false
  register: ipa_dns_ptr_records
- name: Ensure PTR records for hosts exist
  shell: "echo {{ passwords.krb5_admin }} | kinit admin; ipa dnsrecord-add {{ item.ptrzone }} {{ item.a }} --ptr-hostname {{ item.ptr }}.example.com."
  when: item.a not in ipa_dns_ptr_records.stdout_lines
  loop: "{{ dns.rr }}"
- name: Ensure IPA service is enabled and started
  service:
    name: "{{ item.servicename }}"
    state: "{{ item.state }}"
    enabled: "{{ item.enabled }}"
  become: yes
  loop: "{{ ipa_server.servers }}"
- name: Ensure firewall allows {{ item.service }} in zone {{ item.zone }}
  firewalld:
    service: "{{ item.service }}"
    state: "{{ item.state }}"
    permanent: "{{ item.permanent | default('yes') }}"
    immediate: "{{ item.immediate | default('yes') }}"
    zone: "{{ item.zone }}"
  when: ipa_server.firewalld.rules is defined
  loop: "{{ ipa_server.firewalld.rules }}"
  become: yes
