---
# ==============
# vagrant
# ==============
# vars:
#   downloads: the user download directory
#   vagrant_version: the targeted version of vagrant
#   vagrant_install_path: the directory containing the installed vagrant
#   vagrant_package: the filename of the vagrant package file to download
#   vagrant_package_url: full URL to the vagrant package file (including vagrant_package above)
#   vagrant_package_checksum: the checksum of the vagrant package file prefixed with type: (example sha256:abc123...)
#
- name: Check if vagrant binary exists
  stat:
    path: "{{ vagrant_install_path }}/{{ vagrant_bin }}"
  register: installed_vagrant
  changed_when: false
- name: Check the version of vagrant if already installed
  shell: "{{ vagrant_install_path }}/{{ vagrant_bin }} version | sed -n -e 's/^Installed Version: //p'"
  changed_when: false
  register: installed_vagrant_version
  when: installed_vagrant.stat.exists and installed_vagrant.stat.executable
- name: Download the Vagrant package file
  get_url:
    url: "{{ vagrant_package_url }}"
    dest: "{{ downloads }}/{{ vagrant_package }}"
    mode: 0644
    checksum: "{{ vagrant_package_checksum }}"
  when: installed_vagrant.stat.exists == 'false' or (installed_vagrant_version.stdout != vagrant_version)
# =======================
# MacOSX specific install
# =======================
- name: Mount the Vagrant disk image file (MacOSX)
  command: hdiutil attach "{{ vagrant_package }}"
  args:
    chdir: "{{ downloads }}"
  become: yes
  changed_when: false
  when: ansible_distribution == 'MacOSX' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Install the Vagrant pkg file inside the disk image file (MacOSX)
  command: installer -allowUntrusted -pkg "{{ vagrant_package_mount_path }}/Vagrant.pkg" -target /
  become: yes
  notify: vagrant_plugin_update
  when: ansible_distribution == 'MacOSX' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Unmount Vagrant image (MacOSX)
  command: hdiutil detach "{{ vagrant_package_mount_path }}"
  become: yes
  changed_when: false
  when: ansible_distribution == 'MacOSX' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
# =======================
# CentOS specific install
# =======================
- name: Download and install Vagrant rpm file (CentOS)
  package:
    name: "{{ downloads }}/{{ vagrant_package }}"
    state: present
  become: yes
  when: ansible_distribution == 'CentOS' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Test if vagrant-libvirt plugin is already installed (CentOS)
  command: "vagrant plugin list"
  register: vagrant_plugin_installed
  changed_when: false
  when: ansible_distribution == 'CentOS' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Install vagrant-libvirt plugin (CentOS)
  shell: "CONFIGURE_ARGS='with-ldflags=-L/opt/vagrant/embedded/lib with-libvirt-include=/usr/include/libvirt with-libvirt-lib=/usr/lib' vagrant plugin install vagrant-libvirt"
  when: ansible_distribution == 'CentOS' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version) and 'vagrant-libvirt' not in vagrant_plugin_installed.stdout
# =======================
# Debian specific install
# =======================
- name: Install the Vagrant deb file (Debian)
  apt:
    deb: "{{ downloads }}/{{ vagrant_package }}"
  become: yes
  when: ansible_distribution == 'Debian' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Test if vagrant-libvirt plugin is already installed (Debian)
  command: "vagrant plugin list"
  register: vagrant_plugin_installed
  changed_when: false
  when: ansible_distribution == 'Debian' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Install vagrant-libvirt plugin (Debian)
  shell: "CONFIGURE_ARGS='with-ldflags=-L/opt/vagrant/embedded/lib with-libvirt-include=/usr/include/libvirt with-libvirt-lib=/usr/lib' vagrant plugin install vagrant-libvirt"
  when: ansible_distribution == 'Debian' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version) and 'vagrant-libvirt' not in vagrant_plugin_installed.stdout
# =======================
# Ubuntu specific install
# =======================
- name: Install the Vagrant deb file (Ubuntu)
  apt:
    deb: "{{ downloads }}/{{ vagrant_package }}"
  become: yes
  when: ansible_distribution == 'Ubuntu' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Test if vagrant-libvirt plugin is already installed (Ubuntu)
  command: "vagrant plugin list"
  register: vagrant_plugin_installed
  changed_when: false
  when: ansible_distribution == 'Ubuntu' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version)
- name: Install vagrant-libvirt plugin (Ubuntu)
  shell: "CONFIGURE_ARGS='with-ldflags=-L/opt/vagrant/embedded/lib with-libvirt-include=/usr/include/libvirt with-libvirt-lib=/usr/lib' vagrant plugin install vagrant-libvirt"
  when: ansible_distribution == 'Ubuntu' and (installed_vagrant.stat.exists == false or installed_vagrant_version.stdout != vagrant_version) and 'vagrant-libvirt' not in vagrant_plugin_installed.stdout
# =======================
# Configure Vagrant keys
# =======================
- name: Ensure {{ ansible_user_dir }}/keys directory exists
  file:
    path: "{{ ansible_user_dir }}/keys"
    state: directory
    mode: 0700
- name: Test if {{ ansible_user_dir }}/keys/vagrant already installed
  stat:
    path: "{{ ansible_user_dir }}/keys/vagrant"
  register: keys_installation
  changed_when: False
- name: Ensure key pair in {{ ansible_user_dir }}/keys
  command: ssh-keygen -t rsa -b 4096 -f vagrant -N "" -C "vagrant public key created by vagrantbox setup"
  args:
    chdir: "{{ ansible_user_dir }}/keys"
    creates: "{{ ansible_user_dir }}/keys/vagrant"
  when: keys_installation.stat.isreg is not defined
