# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # These are the VM configuration defaults when not overridden
  config.ssh.private_key_path = "{{ key_dir }}/vagrant"
  config.vm.box = "{{ base_boxes[1].name }}"
  config.vm.network :private_network,
    :type => "dhcp",
    :libvirt__network_name => "vagrant-private-dhcp",
    :libvirt__domain_name => "example.com",
    :libvirt__network_address => "192.168.4.0",
    :libvirt__netmask => "255.255.255.0",
    :libvirt__dhcp_enabled => true,
    :libvirt__host_ip => "192.168.4.1",
    :libvirt__dhcp_start => "192.168.4.2",
    :libvirt__dhcp_stop => "192.168.4.99",
    :libvirt__dhcp_bootp_file => "pxelinux/pxelinux.0",
    :libvirt__dhcp_bootp_server => "192.168.4.102"
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.host = "localhost"
    libvirt.uri = 'qemu:///system'
    libvirt.memory = 1024
  end
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "ansible/vagrant-vm-playbook.yml"
    ansible.skip_tags = "disabled"
    ansible.groups = {
      "rhce8_vms" => [
        "labipa",
        "control",
        "ansible1",
        "ansible2",
        "ansible3",
        "ansible4"
      ],
      "nfs_servers" => [
        "labipa"
      ],
      "ftp_servers" => [
        "labipa"
      ],
      "samba_servers" => [
        "labipa"
      ],
      "ipa_servers" => [
        "labipa"
      ],
      "krb5_clients" => [
        "labipa"
      ]
    }
  end
  config.vm.synced_folder ".", "/vagrant", disabled: true

  #==============================
  #==  CentOS 8.x Lab Machines ==
  #==============================
  #=== labipa ===
  config.vm.define "labipa" do |node|
    node.vm.provider :libvirt do |libvirt|
      libvirt.memory = 2048
    end
  end

  #=============================================
  #==  Machines for practice RHCE 8 practice  ==
  #=============================================
  #=== control ===
  config.vm.define "control" do |node|
  end

  #=== ansible1 ===
  config.vm.define "ansible1" do |node|
  end

  #=== ansible2 ===
  config.vm.define "ansible2" do |node|
  end

  #=== ansible3 ===
  config.vm.define "ansible3" do |node|
  end

  #=== ansible4 ===
  config.vm.define "ansible4" do |node|
  end
end
